diff --git a/test_enc/Android.mk b/test_enc/Android.mk
index 2aa3135..33c3569 100644
--- a/test_enc/Android.mk
+++ b/test_enc/Android.mk
@@ -39,6 +39,9 @@ LOCAL_SRC_FILES:= amlenc.c \
 	output.c
 
 LOCAL_STATIC_LIBRARIES :=libcutils
+LOCAL_SHARED_LIBRARIES :=libvpcodec libdl
+
+LOCAL_C_INCLUDES := $(TOP)/external/EcoderAPI/EncoderAPI/bjunion_enc\
 
 LOCAL_CFLAGS +=-g
 LOCAL_CPPFLAGS := -g
diff --git a/test_enc/amlenc.c b/test_enc/amlenc.c
index 02cda90..a8f98a5 100644
--- a/test_enc/amlenc.c
+++ b/test_enc/amlenc.c
@@ -49,6 +49,9 @@
 #include "amlenc.h"
 #include "enc_define.h"
 #include "m8venclib.h"
+#include <vpcodec_1_0.h>
+
+#include <dlfcn.h>
 
 #define ENCODER_PATH       "/dev/amvenc_avc"
 
@@ -171,16 +174,23 @@ void UnInitAMVEncode(amvenc_hw_t *hw_info)
 
 int StartEncode(char *src, char *dst, int width, int height, int qp, int framerate, int num)
 {
+	vl_codec_handle_t handle = NULL;
     AMVEnc_Status status = AMVENC_FAIL;
     int outfd = -1;
     amvenc_info_t *info = (amvenc_info_t *)malloc(sizeof(amvenc_info_t));
-    unsigned char *buffer = (unsigned char *)malloc(512 * 1024 * sizeof(char));
+    unsigned char *buffer = (unsigned char *)malloc(1280 * 720 * 3 / 2 * sizeof(char));
     unsigned char *input = (unsigned char *)malloc(width * height * 2);
     int datalen = 0;
     unsigned framesize  = width * height * 3 / 2;
     unsigned yuv[4];
     FILE *fp = NULL;
     int i = 0;
+
+
+    typedef vl_codec_handle_t (*encoder_init)(vl_codec_id_t codec_id, int width, int height, int frame_rate, int bit_rate, int gop, vl_img_format_t img_format);
+    typedef int (*encoder_encode)(vl_codec_handle_t handle, vl_frame_type_t type, char *in, int in_size, char **out);
+    typedef int (*encoder_destory)(vl_codec_handle_t handle);
+
     if (!info)
     {
         status = AMVENC_MEMORY_FAIL;
@@ -210,53 +220,67 @@ int StartEncode(char *src, char *dst, int width, int height, int qp, int framera
         status = AMVENC_FAIL;
         goto exit;
     }
-    memset(info, 0, sizeof(amvenc_info_t));
-    info->hw_info.dev_fd = -1;
-    info->hw_info.dev_id = NO_DEFINE;
-    /* now the rate control and performance related parameters */
-    info->enc_width = width;
-    info->enc_height = height;
-    info->frame_rate = framerate;
-    info->initQP = qp;
-    if (info->initQP == 0)
-    {
-        info->initQP = 26;
-    }
-    info->hw_info.init_para.enc_width = info->enc_width;
-    info->hw_info.init_para.enc_height = info->enc_height;
-    info->hw_info.init_para.initQP = info->initQP;
-    info->hw_info.init_para.nSliceHeaderSpacing = info->nSliceHeaderSpacing;
-    info->hw_info.init_para.MBsIntraRefresh = info->MBsIntraRefresh;
-    info->hw_info.init_para.MBsIntraOverlap = info->MBsIntraOverlap;
-    info->hw_info.init_para.bitrate = info->bitrate;
-    info->hw_info.init_para.frame_rate = info->frame_rate;
-    info->hw_info.init_para.cpbSize = info->cpbSize;
-    info->modTimeRef = 0;     /* ALWAYS ASSUME THAT TIMESTAMP START FROM 0 !!!*/
-    info->prevCodedFrameNum = 0;
-    info->late_frame_count = 0;
-    printf("InitAMVEncode !\n");
-    status = InitAMVEncode(&info->hw_info, M8_FAST);
-    if (status != AMVENC_SUCCESS)
-    {
-        printf("InitAMVEncode error!\n");
-        goto exit;
-    }
-    printf("AMVEncodeSPS_PPS !\n");
-    memset(buffer, 0, 512 * 1024 * sizeof(char));
-    status = AMVEncodeSPS_PPS(&info->hw_info, buffer, &datalen);
-    if (status != AMVENC_SUCCESS)
-    {
-        printf("AMVEncodeSPS_PPS error!\n");
-        goto exit;
-    }
-    write(outfd, (unsigned char *)buffer, datalen);
-    /*
-        if (fread(input, 1, framesize, fp ) != framesize) {
-            printf("read input file error!\n");
-            goto exit;
-        }
-    */
-    printf("AMVEncodeInitFrame !\n");
+
+	void *libvpcodec_handle = dlopen("libvpcodec.so",RTLD_NOW);
+
+	if (!libvpcodec_handle) {
+        	printf("dlopen error!\n");
+	}
+	encoder_init init = (encoder_init)dlsym(libvpcodec_handle, "vl_video_encoder_init");
+	encoder_encode encode = (encoder_encode)dlsym(libvpcodec_handle, "vl_video_encoder_encode");
+	encoder_destory destory = (encoder_destory) dlsym(libvpcodec_handle, "vl_video_encoder_destory");
+    //memset(info, 0, sizeof(amvenc_info_t));
+    //info->hw_info.dev_fd = -1;
+    //info->hw_info.dev_id = NO_DEFINE;
+    ///* now the rate control and performance related parameters */
+    //info->enc_width = width;
+    //info->enc_height = height;
+    //info->frame_rate = framerate;
+    //info->initQP = qp;
+    //if (info->initQP == 0)
+    //{
+    //    info->initQP = 26;
+    //}
+    //info->hw_info.init_para.enc_width = info->enc_width;
+    //info->hw_info.init_para.enc_height = info->enc_height;
+    //info->hw_info.init_para.initQP = info->initQP;
+    //info->hw_info.init_para.nSliceHeaderSpacing = info->nSliceHeaderSpacing;
+    //info->hw_info.init_para.MBsIntraRefresh = info->MBsIntraRefresh;
+    //info->hw_info.init_para.MBsIntraOverlap = info->MBsIntraOverlap;
+    //info->hw_info.init_para.bitrate = info->bitrate;
+    //info->hw_info.init_para.frame_rate = info->frame_rate;
+    //info->hw_info.init_para.cpbSize = info->cpbSize;
+    //info->modTimeRef = 0;     /* ALWAYS ASSUME THAT TIMESTAMP START FROM 0 !!!*/
+    //info->prevCodedFrameNum = 0;
+    //info->late_frame_count = 0;
+    //printf("InitAMVEncode !\n");
+    //status = InitAMVEncode(&info->hw_info, M8_FAST);
+    //if (status != AMVENC_SUCCESS)
+    //{
+    //    printf("InitAMVEncode error!\n");
+    //    goto exit;
+    //}
+    //printf("AMVEncodeSPS_PPS !\n");
+    memset(buffer, 0, 1280 * 720 * 3 / 2 * sizeof(char));
+	libvpcodec_handle = init(4, 1280, 720, 25, 3200000, 25, 1);
+        if (libvpcodec_handle == NULL)
+            printf("vl_video_encoder_init failed!\n");
+	else
+            printf("vl_video_encoder_init success! num:%d\n", num);
+    //status = AMVEncodeSPS_PPS(&info->hw_info, buffer, &datalen);
+    //if (status != AMVENC_SUCCESS)
+    //{
+    //    printf("AMVEncodeSPS_PPS error!\n");
+    //    goto exit;
+    //}
+    //write(outfd, (unsigned char *)buffer, datalen);
+    ///*
+    //    if (fread(input, 1, framesize, fp ) != framesize) {
+    //        printf("read input file error!\n");
+    //        goto exit;
+    //    }
+    //*/
+    //printf("AMVEncodeInitFrame !\n");
     while (i < num)
     {
         if (fread(input, 1, framesize, fp) != framesize)
@@ -264,29 +288,35 @@ int StartEncode(char *src, char *dst, int width, int height, int qp, int framera
             printf("read input file error!\n");
             goto exit;
         }
-        yuv[0] = (unsigned)(&input[0]);
-        yuv[1] = (unsigned)(yuv[0] + width * height);
-        yuv[2] = (unsigned)(yuv[0] + width * height * 5 / 4);
-        status = AMVEncodeInitFrame(&info->hw_info, (unsigned *)&yuv[0], VMALLOC_BUFFER, AMVENC_YUV420, ((i % framerate) == 0) ? 1 : 0);
-        if ((status != AMVENC_SUCCESS) && (status != AMVENC_NEW_IDR))
-        {
-            printf("AMVEncodeInitFrame error!\n");
-            break;
-        }
-        printf("AMVEncodeSlice!\n");
-        memset(buffer, 0, 512 * 1024 * sizeof(char));
-        status = AMVEncodeSlice(&info->hw_info, buffer, &datalen);
-        if ((status != AMVENC_SUCCESS) && (status != AMVENC_NEW_IDR) && (status != AMVENC_PICTURE_READY))
-        {
-            printf("AMVEncodeSlice error!\n");
-            break;
-        }
-        status = AMVEncodeCommit(&info->hw_info, ((i % framerate) == 0) ? 1 : 0);
+        //yuv[0] = (unsigned)(&input[0]);
+        //yuv[1] = (unsigned)(yuv[0] + width * height);
+        //yuv[2] = (unsigned)(yuv[0] + width * height * 5 / 4);
+        //status = AMVEncodeInitFrame(&info->hw_info, (unsigned *)&yuv[0], VMALLOC_BUFFER, AMVENC_YUV420, ((i % framerate) == 0) ? 1 : 0);
+        //if ((status != AMVENC_SUCCESS) && (status != AMVENC_NEW_IDR))
+        //{
+        //    printf("AMVEncodeInitFrame error!\n");
+        //    break;
+        //}
+        //printf("AMVEncodeSlice!\n");
+        memset(buffer, 0, 1280 * 720 * 3 / 2 * sizeof(char));
+            printf("vl_video_encoder start ! \n");
+	datalen = encode(libvpcodec_handle, 0, input, 1280 * 720 * 3 / 2 * sizeof(char), &buffer);
+        //status = AMVEncodeSlice(&info->hw_info, buffer, &datalen);
+        //if ((status != AMVENC_SUCCESS) && (status != AMVENC_NEW_IDR) && (status != AMVENC_PICTURE_READY))
+        //{
+        //    printf("AMVEncodeSlice error!\n");
+        //    break;
+        //}
+        //status = AMVEncodeCommit(&info->hw_info, ((i % framerate) == 0) ? 1 : 0);
+            printf("vl_video_encoder a frame! datalen:%d\n",datalen);
         write(outfd, (unsigned char *)buffer, datalen);
         i++;
         printf("AMVEncodeSlice %d!\n", i);
     }
-    UnInitAMVEncode(&info->hw_info);
+	destory(libvpcodec_handle);
+
+	dlclose(libvpcodec_handle);
+    //UnInitAMVEncode(&info->hw_info);
     close(outfd);
     fclose(fp);
     free(buffer);
